name: Accessibility and Performance Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  accessibility-test:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run accessibility tests
      run: npm test -- --testPathPattern=__tests__/a11y
    
    - name: Generate accessibility report
      if: always()
      run: npm test -- --testPathPattern=__tests__/a11y --json --outputFile=./a11y-report.json
    
    - name: Upload accessibility report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: accessibility-report
        path: ./a11y-report.json
        retention-days: 30

  lighthouse-test:
    name: Lighthouse Performance Tests
    runs-on: ubuntu-latest
    needs: accessibility-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Install Lighthouse CI
      run: npm install -g @lhci/cli@0.14.x
    
    - name: Start server in background
      run: npm run start & 
      env:
        PORT: 3000
    
    - name: Wait for server to be ready
      run: |
        echo "Waiting for server to be ready..."
        timeout=60
        counter=0
        until curl --output /dev/null --silent --fail http://localhost:3000/; do
          if [ $counter -eq $timeout ]; then
            echo "Timed out waiting for server to start"
            exit 1
          fi
          counter=$((counter+1))
          echo "Still waiting... ($counter seconds)"
          sleep 1
        done
        echo "Server is ready!"
    
    - name: Run Lighthouse CI
      id: lighthouse
      run: |
        lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
    
    - name: Comment PR with Lighthouse results
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const lighthouseReportPath = './.lighthouseci/manifest.json';
          
          if (!fs.existsSync(lighthouseReportPath)) {
            console.log('No Lighthouse report found');
            return;
          }
          
          const manifest = JSON.parse(fs.readFileSync(lighthouseReportPath, 'utf8'));
          if (!manifest || !manifest.length) {
            console.log('Lighthouse manifest is empty');
            return;
          }
          
          const result = manifest[0];
          const reportURL = result.summary ? result.summary.url : 'No URL found';
          const scoreEmoji = (score) => score >= 0.9 ? '🟢' : score >= 0.7 ? '🟠' : '🔴';
          
          let commentBody = `## 🔍 Lighthouse Performance Results
          
          | Category | Score |
          | --- | --- |
          | Performance | ${scoreEmoji(result.summary.performance)} ${Math.round(result.summary.performance * 100)}% |
          | Accessibility | ${scoreEmoji(result.summary.accessibility)} ${Math.round(result.summary.accessibility * 100)}% |
          | Best Practices | ${scoreEmoji(result.summary['best-practices'])} ${Math.round(result.summary['best-practices'] * 100)}% |
          | SEO | ${scoreEmoji(result.summary.seo)} ${Math.round(result.summary.seo * 100)}% |
          | PWA | ${scoreEmoji(result.summary.pwa)} ${Math.round(result.summary.pwa * 100)}% |
          
          [Full Report](${result.url})
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: commentBody
          });